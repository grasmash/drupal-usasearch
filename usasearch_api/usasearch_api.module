<?php

/**
 * @file
 * USA Search API module.
 */

/**
 * Implements hook_node_insert().
 */
function usasearch_api_node_insert($node) {
  if (!variable_get("usasearch_api_index_{$node->type}_nodes", TRUE)) {
    return FALSE;
  }
  $document = usasearch_api_convert_node_to_document($node);
  usasearch_api_request('post', 'api/v1/documents', array('json' => $document->json()));
}

/**
 * Implements hook_node_update().
 */
function usasearch_api_node_update($node) {
  if (!variable_get("usasearch_api_index_{$node->type}_nodes", TRUE)) {
    return FALSE;
  }

  $document = usasearch_api_convert_node_to_document($node);
  usasearch_api_request('put', 'api/v1/documents/' . $document->getDocumentId(), array('json' => $document->json()));
}

/**
 * Implements hook_node_delete().
 */
function usasearch_api_node_delete($node) {
  if (!variable_get("usasearch_api_index_{$node->type}_nodes", TRUE)) {
    return FALSE;
  }

  $document = usasearch_api_convert_node_to_document($node);
  usasearch_api_request('delete', 'api/v1/documents/' . $document->getDocumentId());
}

/**
 /**
 *
 * @param string $method
 *   The HTTP method to be used via Guzzle.
 *
 * @param $url
 *   The URL of the endpoint resource to which the HTTP request will be made.
 *
 * @param array $request_options
 *   An array of options passed directly to the Guzzle request.
 *
 * @see http://gsa.github.io/slate
 * @see http://guzzle.readthedocs.org/en/5.3/quickstart.html
 */
function usasearch_api_request($method, $url, $request_options = array()) {
  $client = new GuzzleHttp\Client(array(
      'base_url' => 'https://i14y.usa.gov',
      'defaults' => array(
        'timeout' => 5,
        'connect_timeout' => 5,
        'auth' => array(variable_get('usasearch_drawer_handle', ''), variable_get('usasearch_api_password', '')),
        'headers' => array('Content-Type' => 'application/json'),
      ),
    ));

  try {
    $response = $client->$method($url, $request_options);
    watchdog('usasearch_api', 'Updating USASearch index via @method request to @url with options: !options. Got a @response_code response with body "@response_body".', array(
        '@method' => $method,
        '@url' => $url,
        '!options' => '<pre>' . check_plain(print_r($request_options, TRUE)) . '</pre>',
        '@response_code' => $response->getStatusCode(),
        '@response_body' => $response->getBody(),
      ), WATCHDOG_INFO);
  }
  catch(Exception$e) {
    watchdog('usasearch_api', 'USA Search host server could not be reached. Error: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    watchdog('usasearch_api','The JSON sent was <br />'.'<pre>' . check_plain(print_r($request_options, TRUE)) . '</pre>',array('!options' => '<pre>' . check_plain(print_r($request_options, TRUE)) . '</pre>'), WATCHDOG_ERROR);
    if($e->getResponse()->getStatusCode()) {
      watchdog('usasearch_api', 'Updating USASearch index via @method request to @url with options: !options. Got a @response_code response with body "@response_body".', array(
          '@method' => $method,
          '@url' => $url,
          '!options' => '<pre>' . check_plain(print_r($request_options, TRUE)) . '</pre>',
          '@response_code' => $e->getResponse()->getStatusCode(),
          '@response_body' => $e->getResponse()->getBody(),
      ), WATCHDOG_INFO);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function usasearch_api_preprocess_node(&$vars) {
  $vars['title'] = '';
  if($vars['content']['links']) {
    unset($vars['content']['links']);
  }
}

/**
 * Converts a node object into a UsaSearchDocument object.
 *
 * @param object $node
 *   A node object to convert.
 *
 * @return UsaSearchDocument
 *   A UsaSearchDocument based on the provided $node object.
 */
function usasearch_api_convert_node_to_document($node) {
  global $user;

  $document = new UsaSearchDocument();
  $document->setDocumentId($node->nid);
  $document->setTitle($node->title);

  // Set node content property.
  $original_uid = $user->uid;

  $view = node_view($node);
  $user = drupal_anonymous_user();
  $content = drupal_render($view);
  $document->setContent($content);

  // Set Description to using teaser.
  $document->setDescription(drupal_render(node_view($node, 'teaser')));
  $user->uid = $original_uid;
  $document->setPath(url(drupal_get_path_alias("node/{$node->nid}"), array('absolute' => TRUE)));
  $document->setCreated(date('c', $node->created));
  $document->setPromote((bool) $node->promote);

  drupal_alter('usasearch_api_document_request', $document);

  return $document;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usasearch_api_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $node_type = $form['#node_type']->type;
  $variable_name = "usasearch_api_index_{$node_type}_nodes";

  $form['usasearch_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('USA Search settings'),
    '#group' => 'additional_settings',
  );

  $form['usasearch_settings'][$variable_name] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify USA Search about changes to nodes of this type'),
    '#description' => t('If selected, USA Search will be notified when @type nodes are created, updated, or deleted', array('@type' => $node_type)),
    '#default_value' => variable_get($variable_name, TRUE),
  );
}

/**
 * Implements hook_action_info().
 */
function usasearch_api_action_info() {
  return array(
    'usasearch_api_create_doc_action' => array(
      'label' => t('Create record of node in the USASearch index.'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'usasearch_api_update_doc_action' => array(
      'label' => t('Update record of node in the USASearch index.'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'usasearch_api_delete_doc_action' => array(
      'label' => t('Delete record of node in the USASearch index.'),
      'type' => 'node',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action function for usasearch_api_create_doc_action.
 */
function usasearch_api_create_doc_action($node, $context) {
  usasearch_api_node_insert($node);
}

/**
 * Action function for usasearch_api_update_doc_action.
 */
function usasearch_api_update_doc_action($node, $context) {
  usasearch_api_node_update($node);
}

/**
 * Action function for usasearch_api_delete_doc_action.
 */
function usasearch_api_delete_doc_action($node, $context) {
  usasearch_api_node_delete($node);
}

/**
 * Implements hook_module_implements_alter().
 */
function usasearch_api_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'cron') {
    unset($implementations['search']);
  }
}

/**
 * implimentation of hook_form_alter()
 */
function usasearch_api_form_search_admin_settings_alter(&$form, &$form_state, $form_id) {
  $items = drupal_map_assoc(array(10, 20, 50, 100, 200, 500, 1000, 10000));
  $form['indexing_throttle']['search_cron_limit'] = array(
    '#type' => 'select',
    '#title' => t('Number of items to index per cron run'),
    '#default_value' => variable_get('search_cron_limit', 100),
    '#options' => $items,
    '#description' => t('The maximum number of items indexed in each pass of a <a href="@cron_link">cron maintenance task</a>.
  If necessary, reduce the number of items to prevent timeouts and memory errors while indexing.', array('@cron_link' => url('admin/reports/status/run-cron'))),
  );
}

/**
 * Implements hook_cron().
 *
 * @see search_cron()
 */
function usasearch_api_cron() {
  // We register a shutdown function to ensure that search_total is always up
  // to date.
  drupal_register_shutdown_function('search_update_totals');
  foreach (variable_get('search_active_modules', array('node', 'user')) as $module) {
    // Update word index
    $module == 'node' ? module_invoke('usasearch_api', 'update_index') : module_invoke($module, 'update_index');
  }
}

/**
 * Implements hook_update_index().
 *
 * @see node_update_index()
 */
function usasearch_api_update_index() {

  $limit = (int)variable_get('search_cron_limit', 100);
  $result = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, n.nid ASC", 0, $limit);

  foreach ($result as $node) {

    $node = node_load($node->nid);

    // Save the changed time of the most recent indexed node, for the search
    // results half-life calculation.
    variable_set('node_cron_last', $node->changed);

    // Render the node.
    node_build_content($node, 'search_index');
    $node->rendered = drupal_render($node->content);

    $text = '<h1>' . check_plain($node->title) . '</h1>' . $node->rendered;
    // Post document to DigitalGov Search i14y drawer
    usasearch_api_node_insert($node);
    // Fetch extra data normally not visible
    $extra = module_invoke_all('node_update_index', $node);
    foreach ($extra as $t) {
      $text .= $t;
    }
    // Update index
    search_index($node->nid, 'node', $text);
  }
}

